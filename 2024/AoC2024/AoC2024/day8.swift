//
//  day8.swift
//  AoC2024
//
//  Created by a on 09/12/2024.
//

class Day8 {
    let input1 = [
        "............",
        "........0...",
        ".....0......",
        ".......0....",
        "....0.......",
        "......A.....",
        "............",
        "............",
        "........A...",
        ".........A..",
        "............",
        "............",
    ]
    
    let input2 = [
        ".......................V.........e...O............",
        "..........q.pj8...............................u...",
        "...................8..............................",
        ".............8.....6.................J....l....u..",
        "........................6................J..Z..B..",
        "......e.........E...........................O.J...",
        "......Jq..........................5...............",
        "...............E...........e.Q..5.f...............",
        "..............................Q..A.....f..B.....O.",
        "....V...................j.....Af..................",
        "............8......n..............l...f....Z7.....",
        "...............n..........4........A........BD....",
        "...........j...................Q..z.......R....l..",
        "N.........6....q.....3....n.........D...........Z.",
        ".............a.6..3.F........D..I.................",
        ".............03.................Q.......h...2.....",
        "......................A.u.......................m.",
        ".V........F......L.............5..........z.R....Z",
        ".......N....q.................n.......L.E.........",
        "..................M.........y.....................",
        "......N............................m.L..y........R",
        ".o....................L...........I...7..R........",
        "......o..........9..............2.......D.........",
        "..od.............y...........................I....",
        "d........3.....M...........E.............I........",
        "......X.W....................p.2.....7...z....s...",
        "V......o........M.....9.................G......7..",
        ".................M.....................h..0....m..",
        ".......d.......F......p.........s.h........z......",
        "..r..........Y.i................9............s....",
        ".....W..a.Y..........y.............p..............",
        ".....g.......r........w...........................",
        "....r.....b...............g........x.s.....h......",
        "....a.....d.......................................",
        ".....................S.......w.............1......",
        "..Y...............................H...............",
        "...b...........Y........................e..t...0.v",
        "..........i..........w.........9....T........v....",
        ".................U...........2....................",
        ".........S........t......T........................",
        "....................U..................Gt.........",
        "....U...S..........................P.....1.B......",
        ".r...X............w.......P.....x.j...............",
        "...W......x..b........g........F.....a............",
        "S.i.................................1.......H.....",
        ".......U......b......x.....X..........G.1.........",
        "...i....X....................P..4........H........",
        ".................................H................",
        "......W...................T4...g................v.",
        "..........................v........GP..4.....t....",
    ]
    
    func collect(input: [String]) -> [Character: [(row: Int, col: Int)]] {
        var result: [Character: [(row: Int, col: Int)]] = [:]
        
        for (i, line) in input.enumerated() {
            for (j, ch) in line.enumerated() {
                if (ch == ".") { continue }
                result[ch, default: []].append((row: i, col: j))
            }
        }
        
        return result
    }
    
    func dowork() {
        let input = input2
        
        let N = input.count
        let M = input[0].count
        
        var antinodes: [[Bool]] = [[Bool]](repeating: [Bool](repeating: false, count: M), count: N)
        let collected = collect(input: input)

        let inside: (Int, Int) -> Bool = { r, c in
            return r >= 0 && r < N && c >= 0 && c < M
        }
        
        for (_, positions) in collected {
            for (i, pos1) in positions.enumerated() {
                for j in i + 1 ..< positions.count {
                    let pos2 = positions[j]
                    
                    let dr = pos1.row - pos2.row
                    let dc = pos1.col - pos2.col
                    
                    if inside(pos1.row + dr, pos1.col + dc) {
                        antinodes[pos1.row + dr][pos1.col + dc] = true
                    }
                    
                    if inside(pos2.row - dr, pos2.col - dc) {
                        antinodes[pos2.row - dr][pos2.col - dc] = true
                    }
                }
            }
        }
        
        let result = antinodes.flatMap { $0 }.filter { $0 }.count
        print(result)
    }
}
